pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build') {
            steps {
                sh 'javac -encoding UTF-8 -d classes May21/src/**/*.java'
            }
        }
        stage('Test') {
            steps {
				sh 'java -cp classes:May21/lib/junit-platform-console-standalone-1.7.1.jar org.junit.platform.console.ConsoleLauncher --scan-classpath > test_results.txt'            }
        }


    }
    post {
        always {
            archiveArtifacts 'test_results.txt'
        }
        failure {
            echo 'Build or test failed'
            emailext (
            	subject: " Build 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
            	body: """\
					원인 확인이 필요합니다.
					로그: ${env.BUILD_URL}
            		""".stripIndent(),
            	to: "ls010507naver.com"
        	)
        }
        success {
            echo 'Build and test succeeded'
            emailext (
            	subject: "Build 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
            	body: """\
                	빌드 성공!
                	결과 파일 확인: ${env.BUILD_URL}artifact/test_results.txt
                	빌드 URL: ${env.BUILD_URL}
            		""",
            	to: "ls010507@naver.com"
        	)
        }
    }
}
